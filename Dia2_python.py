# -*- coding: utf-8 -*-
"""Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f2_7yWtRAIWiA_ddorJmAQJVbCz9_OZz

# Python

---

## Seu primeiro programa üê£
"""

nome = input("Qual √© o seu nome? ")
print(f"Hello {nome}")

"""1. Fa√ßa um Programa que mostre a mensagem "Alo mundo" na tela.
2. Fa√ßa um Programa que pe√ßa um n√∫mero e ent√£o mostre a mensagem "O n√∫mero informado foi [n√∫mero]."
3. Fa√ßa um Programa que pe√ßa dois n√∫meros e imprima a soma.
4. Fa√ßa um Programa que pe√ßa as 3 notas e mostre a m√©dia.
5. Fa√ßa um Programa que converta metros para cent√≠metros.
"""

print("Alo mundo")

numero = input("Digite um n√∫mero: ")
print(f"O n√∫mero informado foi {numero}")

"""## Operadores
### Aritm√©ticos:
![alt text](https://image.slidesharecdn.com/introduoapython-iijtims-mdulo1-131108230122-phpapp01/95/introduo-python-mdulo-1-46-638.jpg?cb=1383951826)
### L√≥gicos:
![alt text](https://image.slidesharecdn.com/apresentao-170510192311/95/captulo-2-python-6-638.jpg?cb=1494444228)
"""

# SOMA
1+1

# SUBTRA√á√ÉO
1-1

# MULTIPLICA√á√ÉO
1*10

# DIVIS√ÉO
100 / 3

# EXPONENCIA√á√ÉO
4**2

"""## Tipos de Dados

---

* Inteiros:  declarados com **int()**
<br>
Exemplo de inteiros: 4, -234455, 21543...
<br><br>
* Flutuantes:  conhecidos como floating, s√£o n√∫meros decimais, declarados com **float()**
<br>
Exemplo de flutuantes: 4.0, -23.5, 215.43
<br><br>
* Booleanos:  conhecidos como l√≥gicos, temos "True" ou "False", declarados com **bool()**
<br>
Exemplo de booleanos: True, False
<br><br>
* Strings:  conhecidos como cadeia de caracteres, inseridos entre aspas(duplas ou simples), declarados com **str()**
<br>
Exemplo de strings: "oi!", "27", "23.50"
"""

inteiro = 12
type(inteiro)

flutuante = 12.5
type(flutuante)

booleano = True
type(booleano)

caracter = "Ol√°, mundo!"
type(caracter)

# VOC√ä PODE ALTERAR ALGUNS TIPOS DE DADOS
10.45 - "jo√£o"

"""## Estruturas de Dados"""

# LISTA
lista1 = []
lista2 = ['jos√©', 'maria']
lista3 = ['oi', 3.0, 40, True]

dir(lista1)

lista1.insert(0, "ol√°")
lista1

# TUPLAS
tup = (1,2,3)
#dir(tup)
tup.count(4)

# SETS
set1 = ({1,2,3})
set2 = set([1,2,3])
dir(set1)
set1.pop()

# DICIONARIOS
pessoas = {
    "name": "joao",
    "age": 39, 
    "skills": ['python', 'r', 'java']
}
pessoas.values()

"""## Condicionais"""

# IF
if 100 > 99:
  print("100 √© maior que 99!")

# IF, ELSE
if 100 == 99:
  print("100 e 99 s√£o iguais!")
else:
  print("100 √© diferente de 99")

# IF, ELIF, ELSE
if 100 == 99:
  print("100 e 99 s√£o iguais!")
elif 100 > 99:
  print("100 √© maior que 99!")
else:
  print("100 √© menor que 99!")

"""6. Fa√ßa um Programa que pe√ßa dois n√∫meros e imprima o maior deles.
7. Fa√ßa um Programa que pe√ßa um valor e mostre na tela se o valor √© positivo ou negativo.
8. Fa√ßa um Programa que verifique se uma letra digitada √© "F" ou "M". Conforme a letra escrever: F - Feminino, M - Masculino, Sexo Inv√°lido.
9. Fa√ßa um Programa que verifique se uma letra digitada √© vogal ou consoante.
10. Fa√ßa um programa para a leitura de duas notas parciais de um aluno. O programa deve calcular a m√©dia alcan√ßada por aluno e apresentar:
* A mensagem "Aprovado", se a m√©dia alcan√ßada for maior ou igual a sete;
* A mensagem "Reprovado", se a m√©dia for menor do que sete;
* A mensagem "Aprovado com Distin√ß√£o", se a m√©dia for igual a dez.
"""

num1 = int(input(""))

if num1 > 0:
  print("O n√∫mero √© positivo!")
else:
  print("O n√∫mero √© negativo")

"""## Repeti√ß√£o"""

# FOR range
for x in range(0,18,3):
  print(x)

# FOR
palavra = "PALAVRA"
for letra in palavra:
  print(letra)

# WHILE
num = 0
while True:
  print(num)
  num   = num + 1

"""11. Fa√ßa um programa que pe√ßa uma nota, entre zero e dez. Mostre uma mensagem caso o valor seja inv√°lido e continue pedindo at√© que o usu√°rio informe um valor v√°lido.
12. Fa√ßa um programa que leia um nome de usu√°rio e a sua senha e n√£o aceite a senha igual ao nome do usu√°rio, mostrando uma mensagem de erro e voltando a pedir as informa√ß√µes.
13. Fa√ßa um programa que leia e valide as seguintes informa√ß√µes:
* Nome: maior que 3 caracteres;
* Idade: entre 0 e 150;
* Sal√°rio: maior que zero;
* Sexo: 'f' ou 'm';
* Estado Civil: 's', 'c', 'v', 'd';
14. Supondo que a popula√ß√£o de um pa√≠s A seja da ordem de 80000 habitantes com uma taxa anual de crescimento de 3% e que a popula√ß√£o de B seja 200000 habitantes com uma taxa de crescimento de 1.5%. Fa√ßa um programa que calcule e escreva o n√∫mero de anos necess√°rios para que a popula√ß√£o do pa√≠s A ultrapasse ou iguale a popula√ß√£o do pa√≠s B, mantidas as taxas de crescimento.
15. Altere o programa anterior permitindo ao usu√°rio informar as popula√ß√µes e as taxas de crescimento iniciais. Valide a entrada e permita repetir a opera√ß√£o.
"""

num1 = int(input("Digite um valor entre 0 e 10: "))
while num1 < 0 or num1 > 10:
  print("Valor inv√°lido!")
  num1 = int(input("Digite um valor entre 0 e 10: "))

"""## Fun√ß√µes"""

def RaizQuadrada(x,y):
  return x**y

RaizQuadrada(2,2)

def Maiuscula(x):
  return x.upper()

Maiuscula("oi")

"""16. Fa√ßa um programa, com uma fun√ß√£o que necessite de tr√™s argumentos, e que forne√ßa a soma desses tr√™s argumentos.
17. Fa√ßa um programa, com uma fun√ß√£o que necessite de um argumento. A fun√ß√£o retorna o valor de caractere ‚ÄòP‚Äô, se seu argumento for positivo, e ‚ÄòN‚Äô, se seu argumento for zero ou negativo.
18. Fa√ßa um programa com uma fun√ß√£o chamada somaImposto. A fun√ß√£o possui dois par√¢metros formais: taxaImposto, que √© a quantia de imposto sobre vendas expressa em porcentagem e custo, que √© o custo de um item antes do imposto. A fun√ß√£o ‚Äúaltera‚Äù o valor de custo para incluir o imposto sobre vendas.
"""

def Func(a,b,c):
  return a+b+c 

Func(-12,-134,128)

"""# JOGO DA FORCA!"""

import random

def get_word():
    lista_palavras = ['gata', 'c√£o', 'lagarto', 'centop√©ia', 'boi']
    word = random.choice(lista_palavras)
    return word.upper()

def play(word):
    word_completion = "_" * len(word) 
    guessed = False
    guessed_letters = []
    guessed_words = []
    tries = 6
    print(f"JOGO DA FORCA!\nDica: {len(word)} letras!")
    print(display_hangman(tries))
    print(word_completion)
    print("\n")
    
    while not guessed and tries > 0:
        guess = input("Adivinhe uma letra ou palavra: ").upper()
        if len(guess) == 1 and guess.isalpha():
            if guess in guessed_letters:
                print("Voc√™ j√° tentou ", guess)
            elif guess not in word:
                print(guess, "N√£o.")
                tries -= 1
                guessed_letters.append(guess)
            else:
                print(guess, "est√° na palavra!")
                guessed_letters.append(guess)
                word_as_list = list(word_completion)
                indices = [i for i, letter in enumerate(word) if letter == guess]
                for index in indices:
                    word_as_list[index] = guess
                word_completion = "".join(word_as_list)
                if "_" not in word_completion:
                    guessed = True
        elif len(guess) == len(word) and guess.isalpha():
            if guess in guessed_words:
                print("Voc√™ j√° tentou a palavra", guess)
            elif guess != word:
                print(guess, "n√£o √© a palavra.")
                tries -= 1
                guessed_words.append(guess)
            else:
                guessed = True
                word_completion = word
        else:
            print("Inv√°lido.")
        print(display_hangman(tries))
        print(word_completion)
        print("\n")
    if guessed:
        print("Parab√©ns, voc√™ adivinhou a palavra! Voc√™ venceu!")
    else:
        print("Voc√™ perdeu!. A palavra era " + word + ".")

def display_hangman(tries):
    stages = [  # cabe√ßa, tronco e bra√ßos e pernas: morte.
                """
                   --------
                   |      |
                   |      O
                   |     \|/
                   |      |
                   |     / \
                   -
                """,
                # cabe√ßa, tronco e bra√ßos, perna
                """
                   --------
                   |      |
                   |      O
                   |     \|/
                   |      |
                   |     / 
                   -
                """,
                # cabe√ßa, tronco e bra√ßos
                """
                   --------
                   |      |
                   |      O
                   |     \|/
                   |      |
                   |      
                   -
                """,
                # cabe√ßa, tronco e bra√ßo
                """
                   --------
                   |      |
                   |      O
                   |     \|
                   |      |
                   |     
                   -
                """,
                # cabe√ßa e tronco
                """
                   --------
                   |      |
                   |      O
                   |      |
                   |      |
                   |     
                   -
                """,
                # cabe√ßa
                """
                   --------
                   |      |
                   |      O
                   |    
                   |      
                   |     
                   -
                """,
                # vazio
                """
                   --------
                   |      |
                   |      
                   |    
                   |      
                   |     
                   -
                """
    ]
    return stages[tries]

def main():
    word = get_word()
    play(word)
    while input("Jogar de novo? (S/N) ").upper() == "S":
        word = get_word()
        play(word)


if __name__ == "__main__":
    main()

"""# CHATBOT

---
https://chatterbot.readthedocs.io/en/stable/
"""

!pip install chatterbot
!pip install chatterbot_corpus

from chatterbot import ChatBot
from chatterbot.trainers import ListTrainer
from chatterbot.trainers import ChatterBotCorpusTrainer

bot = ChatBot('Pybot')
bot = ChatBot(
    'Pybot',
    storage_adapter='chatterbot.storage.SQLStorageAdapter',
    database_uri='sqlite:///database.sqlite3'
    )
    
conversa = ListTrainer(bot)
conversa.train([
    'Oi?',
    'Ol√°',
    'Qual o seu nome?',
    'Pybot',
    'Prazer em te conhecer',
    'Igualmente!',
    'Tudo bem?',
    'Muito bem e voc√™?',
    '√ìtimo',
    'Papo bom o nosso',
    'kkk',
    'adeus',
    'Volte sempre!',
])

trainer = ChatterBotCorpusTrainer(bot)
trainer.train('chatterbot.corpus.portuguese')

while True:
  resposta = bot.get_response(input("Usu√°rio: "))
  if float(resposta.confidence) > 0.5:
      print("Irineu: ", resposta)
  else:
      print("Desculpe, eu n√£o entendi!")